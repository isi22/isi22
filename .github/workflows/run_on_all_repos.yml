name: Find and Update Badges Everywhere

on:
  workflow_dispatch:

jobs:
  # This job finds all the files that need updating across all your repos
  find-files:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Find all md and ipynb files
        id: set-matrix
        env:
          # Use your Personal Access Token with repo and workflow scopes
          GH_TOKEN: ${{ secrets.CROSS_REPO_PAT }}
        run: |
          echo "Finding repositories..."
          REPOS=$(gh repo list --limit 1000 --json nameWithOwner --jq -r '.[].nameWithOwner')
          
          echo "Building matrix of files to update..."
          MATRIX="{\"include\":["
          FIRST_ENTRY=true
          
          for REPO in $REPOS; do
            # Find all .md and .ipynb files in the default branch
            FILES=$(gh api "repos/$REPO/git/trees/main?recursive=1" -q '.tree[].path | select(endswith(".md") or endswith(".ipynb"))' || true)
            for FILE in $FILES; do
              if [ "$FIRST_ENTRY" = false ]; then
                MATRIX="$MATRIX,"
              fi
              # Add the repo and file path to our matrix
              MATRIX="$MATRIX{\"repo\":\"$REPO\", \"file\":\"$FILE\"}"
              FIRST_ENTRY=false
            done
          done
          
          MATRIX="$MATRIX]}"
          echo "Matrix generation complete."
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  # This job calls the reusable workflow for each file found
  update-badges:
    needs: find-files
    # Only run this job if files were actually found
    if: needs.find-files.outputs.matrix != '{"include":[]}'
    strategy:
      # Use the matrix of files generated by the previous job
      matrix: ${{ fromJson(needs.find-files.outputs.matrix) }}
      fail-fast: false # Don't cancel all jobs if one fails
    
    # This calls your central, reusable workflow
    uses: ./.github/workflows/update_badges.yml
    with:
      repo_name: ${{ matrix.repo }}
      file_path: ${{ matrix.file }}
    # Pass the PAT secret to the reusable workflow
    secrets:
      YOUR_PAT: ${{ secrets.YOUR_PAT }}