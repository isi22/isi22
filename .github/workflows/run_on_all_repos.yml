# .github/workflows/run_on_all_repos.yml

on:
  workflow_dispatch:

jobs:
  find-files:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Find all md and ipynb files
        id: set-matrix
        env:
          GH_TOKEN: ${{ secrets.CROSS_REPO_PAT }}
        run: |
          echo "Finding repositories and their visibility..."
          REPOS_JSON=$(gh repo list --limit 1000 --json nameWithOwner,isPrivate)
          
          echo "Building matrix of repositories and their files..."
          MATRIX_INCLUDE="["
          FIRST_REPO=true

          for REPO in $(echo "$REPOS_JSON" | jq -r '.[] | @base64'); do
            _jq() {
             echo ${REPO} | base64 --decode | jq -r ${1}
            }
            REPO_NAME=$(_jq '.nameWithOwner')
            IS_PRIVATE=$(_jq '.isPrivate')

            FILES=$(gh api "repos/$REPO_NAME/git/trees/main?recursive=1" -q '.tree[].path | select(endswith(".md") or endswith(".ipynb"))' | tr '\n' ' ' | sed 's/ $//')
            
            if [ -n "$FILES" ]; then
              if [ "$FIRST_REPO" = false ]; then
                MATRIX_INCLUDE="$MATRIX_INCLUDE,"
              fi
              MATRIX_INCLUDE="$MATRIX_INCLUDE{\"repo\":\"$REPO_NAME\", \"is_private\":$IS_PRIVATE, \"files\":\"$FILES\"}"
              FIRST_REPO=false
            fi
          done
          
          MATRIX_INCLUDE="$MATRIX_INCLUDE]"
          MATRIX="{\"include\":$MATRIX_INCLUDE}"
          echo "Matrix generation complete."
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  update-and-parse:
    needs: find-files
    if: needs.find-files.outputs.matrix != '{"include":[]}'
    strategy:
      matrix: ${{ fromJson(needs.find-files.outputs.matrix) }}
      fail-fast: false
    # This job needs an ID to reference its outputs later
    uses: ./.github/workflows/update_badges.yml
    with:
      repo_name: ${{ matrix.repo }}
      file_paths: ${{ matrix.files }}
      is_private: ${{ matrix.is_private }}
    secrets:
      cross_repo_pat: ${{ secrets.CROSS_REPO_PAT }}

  aggregate-projects:
    runs-on: ubuntu-latest
    # This job runs after all the parallel update-and-parse jobs are complete
    needs: update-and-parse
    steps:
      - name: Checkout isi22 repository
        uses: actions/checkout@v4
        with:
          repository: 'isi22/isi22' # Your target repository
          token: ${{ secrets.CROSS_REPO_PAT }}

      - name: Aggregate all project data
        id: aggregate
        run: |
          # The needs context contains the outputs of all matrix jobs
          # We convert it to JSON and use jq to extract and merge the project data
          echo "Aggregating project data from all repositories..."
          ALL_PROJECTS_JSON='${{ toJSON(needs.update-and-parse.outputs) }}'
          
          # Use jq to parse the outputs object, select each job's 'projects_json' string,
          # parse that string into a JSON object, and finally merge all resulting arrays.
          echo "$ALL_PROJECTS_JSON" | jq -r '.[].projects_json' | jq -s 'map(fromjson) | add | unique_by(.url)' > projects.json
          
          echo "Aggregation complete. Final project data:"
          cat projects.json

      - name: Commit and Push aggregated file
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add projects.json
          # Check if there are any changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit in projects.json."
          else
            git commit -m "docs: update aggregated project data"
            echo "Pushing changes to isi22..."
            git push
          fi